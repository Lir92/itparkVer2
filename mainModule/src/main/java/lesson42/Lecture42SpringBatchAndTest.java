package lesson42;

public class Lecture42SpringBatchAndTest {
    /*
    SpringBatch (SB) - используется для "перекладывания" данных из одного источника в другой.

    Процесс работы SB называется ETL (Extract, Transform, Load) - извлечение, трансформация и загрузка данных. С помощью
    данного процесса загружаются данные из одного или нескольких источников, приводятся к общему виду и сохраняются в одно
    или (несколько) хранилище данных.

    Часто в процессе трансформации данные проходят процедуру очиски, при которой отсекаются не валидные данные. Также
    данные могут быть дополнены и/или обогащены.

    Источники данных могут быть любые:
        файлы разных типов (CSV, XLS и др.);
        БД;
        очереди.

    SB имеет удобные абстракции для чтения, записи данных. С его помощью можно останавливать или запускать задания.
    Задания задаются в простом декларативном виде.

    SB содержит большое количество дополнительных классов, позволяющих просто работать с JDBC, файлами, другими хранилищами.
    Это позволяет эффективно выносить в отдельные пакеты-утилиты, т.е. нет привязки к репозиториям.
    Как и в других Spring приложениях SB легко конфигурируется.

    Терминология:
        Job - абстракция "работы" - содержит описание шагов, их которых состоит обработка данной "работы".
        Step - шаг работы. Может быть стандартным (чтение откуда-л.), а может быть кастомным - преобразование или
        отправка в какой-н. сервис. Step состоит из:
                ItemReader - интерфейс для чтения какого-л. Item
                ItemProcessor - принимает один Item, но возвращает в общем виде дргой или тот же самый. Данный шаг
                                задаётся самостоятельно.
                ItemWriter - интерфейс для записи полученного Item куда-то.
        Item - конкретный элемент для обработки - строчка в БД/ файле / доменном объекте.
        Chunk (пачка) - набор item-ов, которые будут обрабатываться за раз, пр-р .chunk(n), где n - любое необходимое число.
        ----------------------------------------------------------------------------------------------------------------
        JobInstance (JI) - создаётся перед выполнением каждого Job. Похоже на отношение класс-экземпляр и имеет свой ID.
        JobExecution (JE) - создаётся для каждого выполнения конкретного JI. JE привязан по ID с JI. У одного JI может быть
                            несколько JE.
        StepExecution (SE) - тоже, что JE, только для шага.
        ----------------------------------------------------------------------------------------------------------------
        JobRepository (JR) - репозиторий для взаимодействя с хранилищем всех Job, Execution и других сущностей.
        SimpleJobRepository (SJR) - простая реализация JR.
        ----------------------------------------------------------------------------------------------------------------
        JobLauncher - запускатор для Job-объектов.
        ----------------------------------------------------------------------------------------------------------------

    Запсустить Job можно следующими способами:
       - spring.batch.job.enabled - при true (значение по умолчанию) все Job-объекты запустятся при старте приложения.
       - через запуск jar с параметрами, с помощью класса CommandLineJobRunner. При помощи такого способа можно запускать
         Job даже, если spring.batch.job.enabled выставлен false.
       - с помощью бина JobLauncher - принимает на вход Job. Можно запустить любой.
       - с помошью бина JobOperator - принимает на вход имя Job. Запускаются только зарегистрированные Job объекты.

========================================================================================================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SPRING TEST ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Аннотации для тестирования при помощи Spring Boot (SB):
        - @SptingBootTest - позволяет писать тесты с поднятием контекста SpringBoot. Включает @MockBean.
        - @RunWith(SpringRunner.class)
          @ExtendWith({SpringExtension.class}) - расширения для запуска тестов для JUnit4 и JUnit5.
        - @MockBean - создаёт мок (Mockito), который перед каждым тестом заменяет исходный бин в контексте.

    При создании тестов стоит создавать пакеты с теми же именами, которыми названы файлы в основной программе.

     */
}
