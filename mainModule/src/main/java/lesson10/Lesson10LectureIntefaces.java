package lesson10;

public class Lesson10LectureIntefaces {
    /*
====================================================== ИЕРАРХИЯ ========================================================
    Иерархия классов - набор классов,связанных отношением наследования (иерархия).

    в Java запрещено множественное наследование для классов.

    Пока методы, которые наследует дочерний класс из ротельских,имеют разные имена проблем во множественном наследовании
    нет, они появляются, когда в один из классов добавляется метод с таким же именем (и имеют не private модификатор).

    При наследовании классов активация происходит от родительского к дочерним.

    Ининициализировать можно как в отдельном блок инициалиации, так и в конструкторе. При множественной инициализации одного
    и того же поля, присвоено будет последнее инициализированное значение.

    Сгнатура метода -  в неё входят: параметры (их тип), которые в него передаются; название метода.

================================================= ОПРЕДЕЛЕНИЕ МЕТОДОВ ==================================================
    При переопределении методов, можно менять модификатор но только на более широкий, то есть, если в родительском классе
    указан дефолтный или protected модификатор, то в дочернем классе в методе нельзя поставить модификатор private, только
    public или тот, что указан в классе предка.

    Модификатор private не участвует в override (переопределение).

    Перегрузка метода (overload) - это одинаковые по имени методы,но различные по параметрам (количествам или типам).
    Н-р конструктор без параметров и конструктор с таким же именем, но с конкретными параметрами.

===================================================== ИНТЕРФЕЙСЫ =======================================================
    Интерфейсы - абстракции, которые позволяют дополнительно декларировать выполнение определённых действий, а-ля пульт
    от тв. В интерфейсе должны быть только важные для пользователя действия, а логика машины там присутствовать не должна.

    Названия интерфейсов обычно оканчиваются на -able, н-р: printable, cloneable, serializable, readable etc. Название
    интерфейса должно описывать действие, которое он описывает.

    В интерфейсе на равне с методами можно определять константы.

    ВАЖНО: Есть определённая особенность в определении полей - добавляются следующие модификаторы по умолчанию
    "public static final". Это значит, что всё, что определено в качестве полей интерфейса менять нельзя. Все поля интерфейса
    являются константами.

    Лучше не определять поля в интерфейсе, а только методы, где и будут храниться необходимые нам поля с переменными.

    Интерфейсы, в отличие от классов, имеют множественное наследование.

    СОВЕТ: Не стоит делать интерфейсы раздутыми наследованиями, лучше сделать больше интерфейсов с разными задачами.

    ВАЖНО: В интерфейсах идёт декларирование методов, а не их реализация. Однако, если в интерфейсе есть default-метод,
    то он в себе содержит стандартный конструктор и повторение таких методов при множетсвенном наследии вызывает проблемы.
    Для решения данной проблемы можно:
        1 - отказаться от одного из default расширений для метода;
        2 - переопределить в интерфейсе-наследнике default-метод, который перекроет родительские, либо переиспользовать
        методы из родительских классов через ссылку на интерфейс по очереди.

======================================================= RECORD =========================================================
    Record - способо создания псевдоклассов, в которых подразумевается некоторая неизменчивость. Все поля этого класса
    имеют модификатор final и не могут быть изменены, следовательно Set-теры создавать для рекордов нельзя, только
    Get-теры.

    Данный класс умеет принимать значения для инициализации полей и обращаться к значениям этих полей.

    Record необходим для - для удобства работы с неизменяемыми объектами, которые можно единожды инициализировать и
    работать с ними. Если необходимо вносить хоть какие-то изменения в рекорд, то лучше использовать классы.

==================================================== ПЕРЕЧИСЛЕНИЯ ======================================================
    Перечисления (Enum) - класс для перечисления констант и возможной логики работы с ними, например выбор языка.
    В перечисления можно указывать значения констант в скобках, которые в последствии можно вызывать. Для вызова необходимо
    в классе перечисления указать соответствующий конструктор.

     */
}
