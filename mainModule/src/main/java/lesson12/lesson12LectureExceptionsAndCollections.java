package lesson12;

public class lesson12LectureExceptionsAndCollections {

    /*
============================================= ИСКЛЮЧЕНИЯ ==============================================================

    Исключения стоит обрабатывать в отдельных методах-обработчиках или в main методе, но не в методе, где это исключение
    появляется. (н-р стоит ловить исключение в AccountRunner, но не в Account).

    Появление исключений сопровождают комментариями джава-доками, поясняя где и почему может выброситься исключение.

    Можно создавать свои собственные исключения. Такие исключения создаются, как класс, который расширяет / наследует
    либо Exception, либо RunTimeException.

    Если создаваемые исключения расширяются от Exception мы обязаны обработать через оператор throws.
    Если мы создаём исключение, которое расширяет RunTimeException, то throw объявлять не обязательно.

=== Проверяемыми исключениями стоит пользоваться, если мы точно знаем, что наш метод пытается сделать обращение к внешним
    источникам (сервер, хост и т.д.).

=== Непроверяемыми исключениями стоит пользоваться, когда мы проверяем входные параметры, состояние объекта и это не
    удовлетворяет нашим условиям, то стоит пользоваться расширением от RunTimeException.

    Если исключение генерируется в статичном блоке, то это является Ошибкой и не даёт отработать ей, для работы последующих
    блоков.
    В статичных блоках необходимо быть аккуратным и даже на RunTimeException делать try-catch блоки.

    Служебное слово throws означает, что мы не обрабатываем исключение сейчас, а пробрасываем его на уровень выше.
    Оператор throw - означает, что он выбрасывает исключение.

    Если исключение непроверяемое, то throw используется независимо. Если исключение проверяемое, то throws используется
    совместно с throw.

    Проверки исключения лучше не указывать в конструкторах, это стоит делать в методах.

    ======== Наследование исключений ========
    Если мы наследуем исключение от родительского класса, то в дочернем классе нам необходимо повторить этот метод.
    Если мы не укажем его, то будем вынуждены обработать его try-catch блоком внутри переопределяемого метода.

    Использовать более широкие исключения нельзя, если в родительском классе указан более узкий тип исключения.
    Разрешено подменять исключения, но в таком случае необходимо делать try-catch блоки для первоначального исключения


============================================== КОЛЛЕКЦИИ ===============================================================

    Коллекции - набор готовых структур данных.

    Коллекции бывают следующих типов:
    1 - Списки (List)
    2 - Очереди / множества

    Списки - некий упорядоченный набор данных, при этом все элементы списка могут не быть уникальными. В списках можно
    использовать индексирование элементов, что бы точно знать номер индекса с тем или иным значением.

!!!!NB Списки требуют больше памяти, чем массивы.

    В списках можно хранить null - элементы.

     */
}