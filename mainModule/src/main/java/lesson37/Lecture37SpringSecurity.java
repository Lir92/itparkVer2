package lesson37;

public class Lecture37SpringSecurity {
    /*
    Аутентификация - проверка логина и пароля для уточнения есть ли такой пользователь.
    Авторизация - проверка системы на то, какие права пользователь имеет и какой функиционал он может использовать.

    Механизмы безопасности:
    - механизм подтверждения подлинности пользователя; - аутентификация
    - механизм предоставления / запрещения доступа пользователям;
    - механизм хранения прав доступа;
    - механизм проверки прав доступа; (должна осуществляться без помощи программиста)

        При разработке стоит использовать Spring Security, когда приложение не работает с важными данными. Данный функционал
    даёт возможность сосредоточиться на функционале приложения, а не на безопасности.
        С другой стороны, стоит писать механизмы безопасности самому, если в программе используются важные данные клиентов
    (данные о счетах, коммерчески важная информация и т.д.)

    Механизмы аутентификации:
        HTTP Basic authentication (авторизация через форму - логин & пароль) ======= самые популярные механизмы ========
        HTTP Digest authentication - авторизация через подпись
        HTTP X.509 - авторизация через сертификаты.
        Form-based authentication (авторизация через форму - логин & пароль) ======= самые популярные механизмы ========

        Отличие Form-based authentication от HTTP Basic authentication в том, что первый можно настраивать и стилизовать,
        в то время как HTTP Basic authentication - стандартная неизменяемая форма.

        Также есть такие механизмы аутентификации:
            OpenID - авторизация через другой ресурс (н-р авторизация в налоговом сервисе через Госуслуги)
            LDAP - служба каталогов, которая даёт возможность регистрироваться пользователем через каталоги. Данный механизм
                даёт возможность бесшовной авторизации - без предъявления логина и пароля.
            JDBC/In-Memory хранение пользователей - хранение данных пользователей в БД или в памяти. В таких БД пароли
                хранятся в шифрованном виде.

    Механизмы авторизации:
        по URL
        методы в сервисах
        по объектам

    Основное для чего используется Spring Security - авторизация и аутентификация.

    Основные компоненты SS:
        SecurityContext - отражает контекст безопасности и является контейнером для объекта типа Authentication
        Authentication
        UserDetails
        UserDetailsService - интерфейс, реализующий загрузку пользовательских данных из хранилища.
        GrantedAuthority

    AccessDecisionManager - интерфейс объекта, который принимает решение о доступе к запрашиваемому ресурсу. Это внутренняя
    часть Spring и самому в его работу вмешиваться нет необходимости.

    Аннотации для SpringSecurity:
        @EnableWebSecurity
        @Configuration

        или

        @EnableWebSecurity
        @SpringBootApplication

     */
}
