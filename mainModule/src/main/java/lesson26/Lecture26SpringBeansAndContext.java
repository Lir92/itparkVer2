package lesson26;

public class Lecture26SpringBeansAndContext {
    /*
    IoC (Inversion of Control) - базовый принцип работы Spring.
    IoC - это использование контейнеров.

    DI (Dependency Injection) - IoC в применении к зависимостям.

    IoC/DI - упрощает переиспользование компонентов
        - упрощает unit-тестирование (так как происходит тестирование интерфейса, нет необходимости тестировать методы)
        - чистит код - заставляет писать только бизнесс-логику без конфигурационного кода. Все конфигурации выносятся.

    IoC контейнеры в Спринг могут конфигурироваться языками XML, Java, Groovy.
    Обычно конфигурации в Спринг пишут при помощи XML. Также можно задавать метаданные при помощи аннотаций, Java кода и т.д.
    Проще создавать контейнеры при помощи аннотаций.

    Создание бинов (объектов) при помощи аннотаций:
        1) читаются метаданные; - создаются бин дефиниции и после на базе этих дефиниций Спринг создаёт бины.
        2) по метаданным читаются необходимые классы;
        3) создаются бины;
        4) задаются зависимости.

    Все анализы аннотаций и создание бинов происходит в runtime, а не во время компиляции.

    При создании бинов в XML лучше пользоваться constructor-arg - создание бинов через конструктор, а не property, который
    создаёт бины через Setter.

    Что класть в контекст:
        бизнес-сервисы (DAO-объекты, Services)
        Конвертеры, мапперы, маршаллеры
        Подключение к внешним системам
        Служебные бины

    Что не нужно добавлять в контекст:
        Бизнес-объекты(пользователи, зарегистрированные в системе, так как пользователь не уникален и всех пользователей
        держать в контексте смысла нет)
        Настройки
        Временные объекты (scanner, inputstream).

========================================== Типы аннотаций для создания бинов ===========================================
 == @Component
    Для создания бина при помощи аннотаций, можно использовать аннотацию @Component. Данная аннотация навешивается на класс
    с методами, которые будут участвовать в работе.

 == @Autowired
    Данная аннотация навешивается на конструктор и помогает определить Спрингу, какие методы будут участвовать в контексте
    и создании бинов.
    Также @Autowired можно повесить на поле.

    Итого: зависимые бины можно внедрять следующими образами:
        используя @Component и @RequiredArgsConstructor
        по контструктору при помощи аннотации @Autowired
        при помощи сеттера и также аннотации @Autowired

  * NB! имена методов значения не имеют.

  == @Repository - аннотация для бинов, предназначенных для работы с БД и дргуими данными.
     Бины Repository - обёртки, позволяющие обрабатывать исключения во время работы программы.

  == @Service


    Все аннотации выше создают бины для работы в контексте со Спрингом.

  == @Primary - аннотация, которая определяет откуда должны браться бины в контекст при наличии нескольких одинаковых бинов.

  == @Import - импортирует конфигурации указанные в другом классе с конфиг-ами.
  == @ComponentScan - делает тоже, что и @Import, только там указываются пакеты в которых лежат классы с бинами.
            ищет классы конфигураций;
            ищет классы помеченные аннотациями-стереотипами @Service, @Controller и др.
            если пакет не указан, то ищет по пакетам вглубь, начиная с текущего.
            !! не ищет интерфейсы !!


  Если создаём класс для использования, как бин, стоит обозначать его аннотацией Service, Component.

  Циклическая зависимость решается при помощи сеттеров или внедрение через конструктор и аннотации @lazy.
     */
}
