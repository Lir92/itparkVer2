package lesson21;

public class Lecture21RefactoringAndTesting {
    /*
====================================================== Рефакторинг =====================================================

 == Рефакторинг - техника изменения внутренней структуры программного обеспечения, предназначенная для улучшения её
                  понимания его исходного кода без изменения ноблюдаемого поведения.

    Рефаторинг должен сопровождаться тестированием, т.е. все изменения должны быть проверены на работоспособность.
    При рефакторинге необходимо иметь модули автоматических тестов, которые проверят изменённый код на работу.

 == Признаки плохого кода:
    Дублирование кода - любой блок кода, который повторяется много раз, должен быть вынесен в отдельный метод / класс. Так
                        не придётся переписывать большие блоки много раз и при изменениях необходимо будет меньше менять.

    При дублировании кода, можно придерживаться "Правилу трёх повторений" - если блок кода повторяется 3 или больше раз,
    его стоит вынести в отдельный метод или класс.

    Длинный метод - длина тела метода должна быть не больше "высоты экрана", т.е. длина кода должна быть такой, что бы
                    не приходилось проматывать вверх-вниз при чтении.

    Большой класс - когда класс пытается сделать слишком много. Такое часто проявляется в виде слишком большого числа
                    переменных его экземпляра.

    Длинный список параметров

    "Завистливый" метод - когда метод сликом часто обращается к данным другого объекта. Это значит, что он должен быть
                          объявлен в другом классе.

    Несгруппированные данные - это когда одинаковые группы из нескольких переменных повторяются в разных частях программы:
                                    * в членах классов;
                                    * в локальных переменных;
                                    * в параметрах методов.
                                Такие переменные необходимо объединять в отдельный класс.

    Временные переменные класса -

===================================================== Тестирование =====================================================

    JUNIT - фреймворк для тестирования.

    TDD (Test-Driven Development) - метод разработки и тестрования, когда сначала пишется тест-программа, а потом по ней
    реализуется программный код.

    Основные ф-ции TDD:
    * Уменьшение кол-ва дефектов;
    * Поддержка низкоуровнего дизайна - во время построения теста, сразу формируется структура будущей программы с
    необходимыми методами;
    * Поддержка рефакторинга;
    * Поддержка отладки;
    * Помощь в документации кода.

    Все методы в тесте должны помечаться аннотацией @Test и они должны быть только public void.
    Тестовые методы обычно не принимают параметров и имена начинаются либо с test... , либо с should...


     */
}
