package lesson38;

public class Lecture38SpringSecurityAndJWT {
    /*
    Spring Security и Web:
        Интеграция SS и со средой Web достигается при помощи Servlet фильтров;
        Фильтры объеденены в цепочки;
        Каждый фильтр реализует какой-то аспект механизма безопасности; (АОП - аспектно ориентированное программирование)
   !!!  Очень важна последовательность фильтров в цепочке (chain of responsibility).

    Фильтры в SS реализуют конкретные аспекты безопасности:
        - Служебные (формирование куки)
        - Аутентификация
        - Авторизация
        - Обработка ошибок (в случае ошибки авторизации / аутентификации)

    Цепочки фильтров создаются при помщи JavaBasedConfiguration.
    В цепочке фильтров всё выполняется по очереди и если есть взаимоисключающие методы, то ошибки не будет, но сработает тот,
    который был последним. Н-р метод permitAll и denyAll.

    Фильтры SS:
        --- Служебные фильтры ---
        ChannelProcessingFilter - перенаправление с HTTP на HTTPS
        ConcurrentSessionFilter - защита от повторяющихся сессий
        SecurityContextPersistenceFilter - создаёт SecurityContext
        --- Фильтры аутентификации ---
        RememberMeAuthenticationFilter - вторичная аутентификация "Запомни меня" - запоминает пользователя, без необходимости
            повторной авторизации. Для этого создаётся cookie, который обычно хранится 1-2 дня и хранится в памяти браузера
            и прикрепрена к домену. После повторного посещения данного домена, система сама проверит наличие авторизационных
            данных и произведёт вход.
        AnonymousAuthenticationFilter - также вторичная аутентификация - даётся доступ к тем сервисам, где полномочия не важны.
        ExceptionTranslationFilter - фильтр обработки исключений
        FilterSecurityInterceptor - фильтр авторизации (UserDetailsServiceImpl) - отвечает за проверку прав доступа и выдачу этих прав.

    Фильтры создаются неявно при помощи DSL.

     */
}
