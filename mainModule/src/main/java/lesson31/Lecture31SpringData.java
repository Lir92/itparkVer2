package lesson31;

public class Lecture31SpringData {
    /*
 == Persistence Context - кэш первого уровня для объектов, которые хранятся или загружаются в/из БД в рамках сессии /
    транзакции.

    Persistence Context похож на контекст от Spring (Application Context).

    Применяя данный контекст сущность может находиться в трёх состояниях:
        - Transient - состояние при котором объект ещё ни разу не был присоединён к контексту;
        - Persistent - объект находится под управлением контекста. Все изменения в нём попадут в БД.
        - Detached - объект когда-то был прикреплён к контексту, но теперь уже нет. Объект переходит в это состояние,
                    если исключить его из контекста, очистить или закрыть сессию.

    @Transient - аннотация, которая вешается на поле что бы исключить его из меппинга, н-р служебное поле, которое необходимо
                для приложения, но его не нужно сохранять в БД.

    Основные методы EntityManager:
        - find - поиск и загрузка объекта по его ID. Объект сразу получается в состоянии persistent.
        - persist - меняет состояние объекта из transient в persistent. Выполняет insert и бросает PersistentObjectException,
                    если задан ID.
        - merge - меняет состояение из transient или detached в persistent. Для transient работает аналогично persist.
                  Для detached выолняет загрузку из БД и обновляет в контексте. По завершении сессии или коммита транзакции
                  выполняется update.
        - remove - удаление объекта из БД и контекста. Меняет состояние на transient. Выбрасывает исключение, если объект
                   в состоянии detached.
        - refresh - обновление объекта из БД, если он был изменён в другом месте уже после загрузки
        - detach - отключает объект от контекста и меняет состояние на detached.
        - createQuery - создание объекта запроса
        - getEntityGraph - GetEntityGraph - получение ранее определённого графа объекта

    Простые запросы JPQL (примеры):
        select e from Employee e - вернёт всех работников, указанных в БД
        select e from Employee e where e.id = :id - вернёт работников, с определённым ID
        select e from Employee e where e."поле откуда необходимо получить информацию"

===================================================== Transaction ======================================================

    Основные характеристики Транзакций - это ACID:
        Atomicity - атомарность - это последовательность операций, которые выполняются либо все, либо ни одна. Если хоть
                    одна операция не выполнена, то такая транзакция откатывается в начало (н-р списание и пополнение счёта
                    в банке)
        Consistency - консистентность - все действия, которые осуществляются в рамках операций, не вызывают проблем в
                      работе базы.
        Isolation - изоляция - каждая из выполняемых транзакций не должна влиять на другие, каждая транзакция делает
                    своё.
        Durability - долговечность - всё, что было выполнено в транзакции, всё это сохранено. При любых исходах, даже при
                     сбое, то, что успело выполниться должно быть сохранено.

    Типы транзакций:
        Local - транзакции в одном DataSource (одна БД)
        Global - глобальные (распределённые), в нескольких DataSource-ах.

    Транзакции в Spring - Spring Tx - модуль для управления транзакциями. Данный модуль является частью Spring JDBC.

    Spring Tx можно реализовывать 2-мя способами:
        1) декларативное управление при помощи аннотации @Transactional
        2) Императивное управление при помощи TransactionTemplate

     */
}
