package lesson14;

public class Lesson14LectureQueue {
    /*
==================================================== Очереди ====================================================

    ** QUEUE **

    В очереди можно добавлять элементы с одной стороны, а забирать с другой.

    First in first out (fifo) - кто первый пришёл, тот выходит первым.

    Примером очереди можно считать LinkedList.
====
    Для добавления в очередь можно пользоваться методом "offer". Данный метод специфичен только для очередей.

    Метод "remove" удаляет "голову" очереди. В случае, если очередь пустая, выбрасывает исключение "NoSuchElementException".
    Метод "poll" также удаляет значение из головы очереди. Если очередь пустая, выдаёт значение null.

    Методы "element" и "peek" возвращают значения из головы очереди, ничего не удаляя. В случае, если очередь пустая
    element выбрасывает исключение "NoSuchElementException", а peek - значение null
====

    ** ДВУНАПРАВЛЕННАЯ ОЧЕРЕДЬ (Deque) **

    Двунаправленная очередь - это очередь к элементам которой можно обращаться с друх сторон: с начала (головы) и конца
    (хвоста).

    ** STACK **

    Stack - это тоже очередь, в котором осуществляется метод lifo (last in first out), т.е. элемент добавляется в конец
    очереди, а удаляется первый.

==================================================== КАРТЫ (MAP) ====================================================

    Карты - это способ хранения данных, в котором значения вызываются по его ключу (н-р телефонная книга: Имя - ключ, номер
    телефона - значение).

    Если в картах идёт обращение к несуществующему значению, то будет выдан null.

    В картах важно, что бы ключи были уникальными, т.е. повторы запрещены иначе предыдущие значения будут затёрты последними
    добавленными с таким же ключом.

    В картах можно хранить значение null.

    При работе с Hash-коллекциями необходимо всегда внимательно обращаться с реализацией Hash для оптимально работы программы.
    Генерация HashCode обеспечивает более быстрое нахождение значений по их хэш-коду, а не полным перебором всех значений.

    В качестве ключа желательно использовать типы данных String и Integer.
====
    Если в программе должно изменяться значение ключа, то тогда этот параметр необходимо исключить из проверке в методах
    equals и hashCode, иначе получим null.
====

     */

}
